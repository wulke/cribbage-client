name: Deploy to DigitalOcean Droplet
on:
  push:
    branches:
      - main
env:
  ACTOR: ${{ github.actor }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: cribbage-ui

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install, test, and build
        run: |
          npm install
          # npm test
          npm run build
        env:
          CI: true
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Pull docker image into DigitalOcean droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.HOST}} # IP address of the digital ocean host
          username: ${{secrets.USERNAME}} # username of approved user
          key: ${{secrets.KEY}} # private or public key of the server
          script: |
            # stop running container
            docker stop $(echo ${{ env.CONTAINER_NAME }})
            # remove old container
            docker rm $(echo ${{ env.CONTAINER_NAME }})
            # log into github registry
            docker login ${{ env.REGISTRY }} -u ${{ env.ACTOR }} -p ${{ secrets.GITHUB_TOKEN }}
            # pull latest docker image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
            # run latest docker image
            docker run -dit -p 8080:80 --name ${{ env.CONTAINER_NAME }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main 
